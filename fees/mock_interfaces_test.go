// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package fees is a generated GoMock package.
package fees

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "go.temporal.io/sdk/client"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// AddLineItem mocks base method.
func (m *MockRepositoryInterface) AddLineItem(ctx context.Context, billID string, item *LineItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLineItem", ctx, billID, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLineItem indicates an expected call of AddLineItem.
func (mr *MockRepositoryInterfaceMockRecorder) AddLineItem(ctx, billID, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLineItem", reflect.TypeOf((*MockRepositoryInterface)(nil).AddLineItem), ctx, billID, item)
}

// CreateBill mocks base method.
func (m *MockRepositoryInterface) CreateBill(ctx context.Context, bill *Bill) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBill", ctx, bill)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBill indicates an expected call of CreateBill.
func (mr *MockRepositoryInterfaceMockRecorder) CreateBill(ctx, bill interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBill", reflect.TypeOf((*MockRepositoryInterface)(nil).CreateBill), ctx, bill)
}

// GetBillByID mocks base method.
func (m *MockRepositoryInterface) GetBillByID(ctx context.Context, billID string) (*Bill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillByID", ctx, billID)
	ret0, _ := ret[0].(*Bill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBillByID indicates an expected call of GetBillByID.
func (mr *MockRepositoryInterfaceMockRecorder) GetBillByID(ctx, billID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillByID", reflect.TypeOf((*MockRepositoryInterface)(nil).GetBillByID), ctx, billID)
}

// GetBillStatus mocks base method.
func (m *MockRepositoryInterface) GetBillStatus(ctx context.Context, billID string) (BillStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillStatus", ctx, billID)
	ret0, _ := ret[0].(BillStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBillStatus indicates an expected call of GetBillStatus.
func (mr *MockRepositoryInterfaceMockRecorder) GetBillStatus(ctx, billID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillStatus", reflect.TypeOf((*MockRepositoryInterface)(nil).GetBillStatus), ctx, billID)
}

// GetLineItemsByBillID mocks base method.
func (m *MockRepositoryInterface) GetLineItemsByBillID(ctx context.Context, billID string) ([]LineItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLineItemsByBillID", ctx, billID)
	ret0, _ := ret[0].([]LineItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLineItemsByBillID indicates an expected call of GetLineItemsByBillID.
func (mr *MockRepositoryInterfaceMockRecorder) GetLineItemsByBillID(ctx, billID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLineItemsByBillID", reflect.TypeOf((*MockRepositoryInterface)(nil).GetLineItemsByBillID), ctx, billID)
}

// ListAllBills mocks base method.
func (m *MockRepositoryInterface) ListAllBills(ctx context.Context, status *BillStatus, limit, offset int) ([]*Bill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllBills", ctx, status, limit, offset)
	ret0, _ := ret[0].([]*Bill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllBills indicates an expected call of ListAllBills.
func (mr *MockRepositoryInterfaceMockRecorder) ListAllBills(ctx, status, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllBills", reflect.TypeOf((*MockRepositoryInterface)(nil).ListAllBills), ctx, status, limit, offset)
}

// ListBillsByCustomer mocks base method.
func (m *MockRepositoryInterface) ListBillsByCustomer(ctx context.Context, customerID string, status *BillStatus, limit, offset int) ([]*Bill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBillsByCustomer", ctx, customerID, status, limit, offset)
	ret0, _ := ret[0].([]*Bill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBillsByCustomer indicates an expected call of ListBillsByCustomer.
func (mr *MockRepositoryInterfaceMockRecorder) ListBillsByCustomer(ctx, customerID, status, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBillsByCustomer", reflect.TypeOf((*MockRepositoryInterface)(nil).ListBillsByCustomer), ctx, customerID, status, limit, offset)
}

// UpdateBillStatus mocks base method.
func (m *MockRepositoryInterface) UpdateBillStatus(ctx context.Context, billID string, status BillStatus, totalAmount int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBillStatus", ctx, billID, status, totalAmount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBillStatus indicates an expected call of UpdateBillStatus.
func (mr *MockRepositoryInterfaceMockRecorder) UpdateBillStatus(ctx, billID, status, totalAmount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBillStatus", reflect.TypeOf((*MockRepositoryInterface)(nil).UpdateBillStatus), ctx, billID, status, totalAmount)
}

// MockTemporalClientInterface is a mock of TemporalClientInterface interface.
type MockTemporalClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTemporalClientInterfaceMockRecorder
}

// MockTemporalClientInterfaceMockRecorder is the mock recorder for MockTemporalClientInterface.
type MockTemporalClientInterfaceMockRecorder struct {
	mock *MockTemporalClientInterface
}

// NewMockTemporalClientInterface creates a new mock instance.
func NewMockTemporalClientInterface(ctrl *gomock.Controller) *MockTemporalClientInterface {
	mock := &MockTemporalClientInterface{ctrl: ctrl}
	mock.recorder = &MockTemporalClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTemporalClientInterface) EXPECT() *MockTemporalClientInterfaceMockRecorder {
	return m.recorder
}

// ExecuteWorkflow mocks base method.
func (m *MockTemporalClientInterface) ExecuteWorkflow(ctx context.Context, options client.StartWorkflowOptions, workflow interface{}, args ...interface{}) (client.WorkflowRun, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, options, workflow}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteWorkflow", varargs...)
	ret0, _ := ret[0].(client.WorkflowRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteWorkflow indicates an expected call of ExecuteWorkflow.
func (mr *MockTemporalClientInterfaceMockRecorder) ExecuteWorkflow(ctx, options, workflow interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, options, workflow}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteWorkflow", reflect.TypeOf((*MockTemporalClientInterface)(nil).ExecuteWorkflow), varargs...)
}

// SignalWorkflow mocks base method.
func (m *MockTemporalClientInterface) SignalWorkflow(ctx context.Context, workflowID, runID, signalName string, arg interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignalWorkflow", ctx, workflowID, runID, signalName, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignalWorkflow indicates an expected call of SignalWorkflow.
func (mr *MockTemporalClientInterfaceMockRecorder) SignalWorkflow(ctx, workflowID, runID, signalName, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignalWorkflow", reflect.TypeOf((*MockTemporalClientInterface)(nil).SignalWorkflow), ctx, workflowID, runID, signalName, arg)
}
